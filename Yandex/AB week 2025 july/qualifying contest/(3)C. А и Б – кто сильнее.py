"""
А и Б решили поиграть в игру с монеткой. Будем считать, что монетка честная, т.е. вероятность выпадения «орла» и «решки» при бросании равна 0.5.

Правила для игры они придумали следующие:
- Монетку подбрасывают до тех пор, пока не запишутся последовательности из n символов «О» (выпал «орел») и «Р» (выпала «решка»).
- А выигрывает, сколько раз в последовательности на соседних местах будут стоять символы «О» и «Р» (в словах «ОР»). Обозначим это количество через X.
- Б выигрывает, сколько раз в последовательности на соседних местах будут стоять символы «Р» и «О» (в словах «РО»). Обозначим это количество через Y.
- Если X > Y, то выигрывает А; если X < Y, то выигрывает Б; если X = Y, то фиксируется ничья в данной партии.

Например, если после 10 подбрасываний монетки будет получена некоторая последовательность «ОРООРОПРРО» (X = 3 и Y = 2), то в этой игре выигрывает А.

Формат ввода

В единственной строке входных данных записано одно целое число n (1 ≤ n ≤ 100).

Формат вывода

Выведите три действительных числа (разделитель — точка): вероятность победы А, вероятность ничьей, вероятность победы Б.

Ответ считается верным, если каждая из вероятностей отличается от правильного ответа на величину не более 10^-3.

Пример 1
Ввод
1
Вывод
0 1.0 0

Пример 2
Ввод
2
Вывод
0.25 0.5 0.25

Пример 3
Ввод
3
Вывод
0.375 0.375 0.25

Пример 4
Ввод
4
Вывод
0.375 0.375 0.25

Пример 5
Ввод
5
Вывод
0.40625 0.28125 0.3125
"""


def compute_probabilities(n):
    SHIFT = n
    MAXD = 2 * n + 1

    cur0 = [0.0] * MAXD
    cur1 = [0.0] * MAXD

    cur0[SHIFT] = 0.5
    cur1[SHIFT] = 0.5

    for _ in range(1, n):
        nxt0 = [0.0] * MAXD
        nxt1 = [0.0] * MAXD

        for di in range(MAXD):
            p0 = cur0[di]
            p1 = cur1[di]

            if p0:
                nxt0[di] += p0 * 0.5
                nxt1[di] += p0 * 0.5
            if p1:
                if di + 1 < MAXD:
                    nxt0[di + 1] += p1 * 0.5
                if di - 1 >= 0:
                    nxt1[di - 1] += p1 * 0.5

        cur0, cur1 = nxt0, nxt1
    pA = pDraw = pB = 0.0
    for di in range(MAXD):
        D = di - SHIFT
        prob = cur0[di] + cur1[di]
        if D > 0:
            pA += prob
        elif D == 0:
            pDraw += prob
        else:
            pB += prob
    return pA, pDraw, pB


def main():
    n = int(input())
    if not n:
        return
    pA, pDraw, pB = compute_probabilities(n)
    print(f"{pA:.6f} {pDraw:.6f} {pB:.6f}")


if __name__ == "__main__":
    main()
